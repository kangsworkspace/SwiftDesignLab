---
alwaysApply: true
description: SwiftDesignLab 프로젝트 전체 구조 및 아키텍처 개요
---

# SwiftDesignLab 프로젝트 구조

## 프로젝트 개요
이 프로젝트는 좋은 디자인과 UX를 SwiftUI와 UIKit으로 구현하는 디자인 실험실입니다.

## 기본 아키텍처
- **기본 프레임워크**: SwiftUI 기반
- **아키텍처 패턴**: MVVM + Coordinator Pattern
- **의존성 주입**: DIContainer 사용
- **탭 구성**: SwiftUI 탭과 UIKit 탭

## 전체 프로젝트 구조
```
SwiftDesignLab/
├── App/                   # 앱 진입점
├── Coordinator/           # 코디네이터 패턴
│   ├── Core/             # 코디네이터 핵심 구현
│   ├── SwiftUI/          # SwiftUI 탭 코디네이터
│   └── UIKit/            # UIKit 탭 코디네이터
├── View/                  # 뷰 계층
│   ├── Common/           # 공통 뷰 컴포넌트
│   ├── SwiftUI/          # SwiftUI 탭
│   └── UIKit/            # UIKit 탭
├── Model/                 # 데이터 모델
├── DI/                   # 의존성 주입
└── Asset/                # 앱 리소스
```

## 코딩 규칙
- 뷰는 구현하는 디자인의 특성에 따라 뷰모델을 선택적으로 사용
- 복잡한 상태 관리가 필요한 경우에만 ViewModel 사용
- 데이터 모델은 Model/ 폴더에 정의 (DesignCategory, DesignItem 등)
- 엔티티가 필요한 경우에만 Entity 파일을 각 기능 폴더에 정의
- UIViewControllerRepresentable을 사용하여 UIKit을 SwiftUI에 통합
- SwiftUI NavigationPath 기반 코디네이터 패턴으로 화면 전환 관리
- DIContainer로 인스턴스 관리
- 각 기능은 독립적인 폴더에서 관리
- 공통 컴포넌트는 View/Common/ 폴더에서 관리