---
globs: *ViewController*.swift,*View*.swift
description: UIKit 구현 가이드라인
---

# UIKit 구현 가이드라인

## UIKit 탭 구조
- **UIKitTabView**: SwiftUI로 구현된 UIKit 탭의 메인 화면 (SwiftUI 기반 화면 전환)
- **UIKit 디자인 화면**: 각 카테고리 폴더 내의 실제 UIKit 구현체들 (UIViewControllerRepresentable로 통합)
- **화면 전환**: SwiftUI NavigationLink 사용, 내부 디자인 화면만 UIKit

## 기본 구조

### SwiftUI 기반 UIKit 탭
```swift
struct UIKitTabView: View {
    @StateObject private var viewModel = UIKitTabViewModel()
    
    var body: some View {
        NavigationView {
            List {
                // SwiftUI로 구현된 UIKit 탭 UI
                NavigationLink("Animation", destination: AnimationListView())
                NavigationLink("UX", destination: UXListView())
                // ... 기타 카테고리들
            }
            .navigationTitle("UIKit")
        }
    }
}
```

### UIKit 구현체
```swift
class FeatureViewController: UIViewController {
    private let viewModel: FeatureViewModel
    
    init(viewModel: FeatureViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupBindings()
    }
}
```

## 검색 기능
모든 탭 상단에는 검색 버튼이 있어야 합니다:
```swift
private func setupNavigationBar() {
    navigationItem.rightBarButtonItem = UIBarButtonItem(
        title: "검색",
        style: .plain,
        target: self,
        action: #selector(searchButtonTapped)
    )
}
```

## 리스트 구현
UITableView 또는 UICollectionView 사용:
```swift
private func setupTableView() {
    tableView.delegate = self
    tableView.dataSource = self
    tableView.register(DesignItemCell.self, forCellReuseIdentifier: "DesignItemCell")
}
```

## UIViewControllerRepresentable 통합
UIKit 디자인 화면을 SwiftUI에 통합할 때:
```swift
struct FeatureView: UIViewControllerRepresentable {
    let viewModel: FeatureViewModel
    
    func makeUIViewController(context: Context) -> UIViewController {
        return FeatureViewController(viewModel: viewModel)
    }
    
    func updateUIViewController(_ uiViewController: UIViewController, context: Context) {
        // ViewModel 변경사항을 ViewController에 전달
        if let viewController = uiViewController as? FeatureViewController {
            viewController.updateViewModel(viewModel)
        }
    }
}

// SwiftUI에서 사용
struct AnimationListView: View {
    var body: some View {
        List {
            NavigationLink("Fantastic Animation", destination: FantasticAnimationView())
            // ... 기타 애니메이션들
        }
    }
}
```

## Auto Layout 규칙
- NSLayoutConstraint 사용
- translatesAutoresizingMaskIntoConstraints = false 설정
- 적절한 priority 설정
- Safe Area 고려

## 메모리 관리
- weak 참조 사용 (delegate, closure)
- deinit에서 정리 작업
- 순환 참조 방지